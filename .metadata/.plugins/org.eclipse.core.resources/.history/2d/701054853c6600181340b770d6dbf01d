package Memory;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Collections;
import java.util.HashMap;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.*;


public class Board extends JFrame{
	
	HashMap<String, Card> cardset1 = new HashMap();
	
	private int clicks = 0;
	private int tries = 0;
	private int paired = 0;
	private Card secondSelected = null;
	Card chosenCard = null;
	//ArrayList<Card> cardset2 = new ArrayList<Card>();
	
	//Create list of files in image directory
    File folder = new File("src/memoryGamePics/");
    
    File[] files = folder.listFiles();
	
    public void displayCards() {
	

        ArrayList<String> listFiles = new ArrayList<String>();
        
        
        try {
    	    this.setLayout(new GridLayout(5, 4));
        	
        for (File file : files){
        	
            System.out.println(file.getName());
            Card cardx = new Card();
            
            Image pic = ImageIO.read(getClass().getResource("/memoryGamePics/" +file.getName())); 
            pic = pic.getScaledInstance(150, 150, Image.SCALE_DEFAULT);
            cardx.setIcon(new ImageIcon(pic));
            cardx.setIconName(file.getName().toString());
            cardx.setIcon(null);
            System.out.println(file.toString());
            cardx.addActionListener(new selectListener());
            
            
            
            cardset1.put(file.getName(), cardx); 
            listFiles.add(file.getName());
            
            }
           
        	}catch(Exception e) {
        		System.out.println(e);
        	}
       
        	Collections.shuffle(listFiles);
        
        for (String key : listFiles) {
        	   System.out.println("key: " + key + " value: " + cardset1.get(key));
        	   //System.out.println("key: " + key + " value: " +cardset2.get("2" +key));
        	   this.add(cardset1.get(key));
        	   
        	   
        }
    }
       // for (Card cardsFromArray : cardset2.get(arg0)) {
        	//System.out.println(cardsFromArray);
        	//this.add(cardsFromArray);
        	
        
     
	
	
	class selectListener implements ActionListener { 
		
		
		
		
		
		
	
		public void actionPerformed(ActionEvent event) {
			
			System.out.println(clicks);
			
			clicks ++;
			//won't let event execute if 2 cards are already turned
			if (clicks > 2 ) {
				return;
			}
			
			
			Object source = event.getSource();
			//System.out.println(secondSelected);
			System.out.println( " ");
			for (Card newCard : cardset1.values()) {
				
				//System.out.println(newCard.toString());
				
				if (newCard == source ) {
					chosenCard = newCard;
					String clickedCardIconName = chosenCard.getIconName();
					
					System.out.println(clickedCardIconName);
					

					try {
						Image pic2;
						pic2 = ImageIO.read(getClass().getResource("/memoryGamePics/" +clickedCardIconName));
						pic2 = pic2.getScaledInstance(150, 150, Image.SCALE_DEFAULT);
						chosenCard.setIcon(new ImageIcon(pic2));
						 
					} catch (IOException e) {
						
						e.printStackTrace();
					} 
				

						
					if (clicks <= 1) {
						secondSelected = chosenCard;
					}
		            
					System.out.println(chosenCard.getIconName());
					System.out.println(secondSelected.getIconName());
				}
			}
			

		
				if (clicks >=2) {
					

					
					
					
					if (secondSelected != null && chosenCard != null) {
						
						System.out.println(secondSelected.getIconName());
						System.out.println(chosenCard.getIconName().substring(0,4));
						
							
								
								if (secondSelected.getIconName() != chosenCard.getIconName() && secondSelected.getIconName().contains(chosenCard.getIconName().substring(0,4))) {
									System.out.println("Match");
									tries ++;
									paired ++;
									System.out.println("Paired:" + paired);
									clicks = 0;
									
									if (paired == 10) {
										JOptionPane.showMessageDialog(null, "Congratulations! "
												+ "\n You did it in " + tries + " tries");
										
										
										System.exit(0);
									}
								}
								

									

								else {	
									TimerTask task;
									Timer timer = new Timer();
									
									
							        task = new TimerTask() {
							            @Override
							            public void run() { 
									
								        
							            chosenCard.setIcon(null);
										secondSelected.setIcon(null);
										
										clicks = 0;
										System.out.println("clicks restarted");
										tries ++;
										System.out.println("Tries: " + tries);
							            }
							            
							        };
							        timer.schedule(task, 650);
							        

							        


								}
					}

			
				
				
				}
			}
			}
	
			
		}
	



					
					
			
			
			
	
	

			
		
	
	
	


			

	  
	







